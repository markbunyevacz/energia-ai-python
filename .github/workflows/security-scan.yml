name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install Safety
      run: pip install safety

    - name: Run Safety check on requirements
      run: |
        safety check --file requirements-minimal.txt --json --output safety-report.json || true
        safety check --file requirements-dev.txt --json --output safety-dev-report.json || true

    - name: Upload Safety reports
      uses: actions/upload-artifact@v4
      with:
        name: safety-reports
        path: safety-*.json

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Bandit security scan
      run: |
        pip install bandit[toml]
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt -o bandit-report.txt || true

    - name: Upload Bandit reports
      uses: actions/upload-artifact@v4
      with:
        name: bandit-reports
        path: bandit-report.*

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies and license checker
      run: |
        pip install -r requirements-minimal.txt
        pip install pip-licenses

    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=plain --output-file=licenses.txt

    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: licenses.*

  dockerfile-scan:
    name: Dockerfile Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ./Dockerfile
        format: sarif
        output-file: hadolint-results.sarif

    - name: Upload Hadolint results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: hadolint-results.sarif

  trivy-scan:
    name: Trivy Filesystem Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy in table format
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        output: 'trivy-results.txt'

    - name: Upload Trivy table results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-scan-results
        path: trivy-results.txt 