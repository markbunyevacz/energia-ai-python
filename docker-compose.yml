version: '3.8'

services:
  # FastAPI Application
  energia-ai:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    environment:
      - DEBUG=true
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://energia:energia123@postgres:5432/energia_ai
      - MONGODB_URL=mongodb://energia:energia123@mongodb:27017/energia_ai
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - .:/app
      - /app/__pycache__
    depends_on:
      - postgres
      - mongodb
      - redis
      - elasticsearch
      - qdrant
    networks:
      - energia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: energia_ai
      POSTGRES_USER: energia
      POSTGRES_PASSWORD: energia123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - energia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U energia -d energia_ai"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB
  mongodb:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: energia
      MONGO_INITDB_ROOT_PASSWORD: energia123
      MONGO_INITDB_DATABASE: energia_ai
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    networks:
      - energia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    command: redis-server --appendonly yes --requirepass energia123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - energia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "energia123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Elasticsearch for lexical search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - energia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.0
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
    networks:
      - energia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Neo4j Graph Database (for later tasks)
  neo4j:
    image: neo4j:5.13-community
    environment:
      NEO4J_AUTH: neo4j/energia123
      NEO4J_PLUGINS: '["apoc"]'
    volumes:
      - neo4j_data:/data
    ports:
      - "7474:7474"
      - "7687:7687"
    networks:
      - energia-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "cypher-shell -u neo4j -p energia123 'RETURN 1'"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  mongodb_data:
  redis_data:
  elasticsearch_data:
  qdrant_data:
  neo4j_data:

networks:
  energia-network:
    driver: bridge
