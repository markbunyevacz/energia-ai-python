"""
Energia AI Legal System - Complete Usage Guide and Demo
Shows how to effectively use your current legal AI capabilities
"""
import asyncio
import json
import sys
import os
from datetime import datetime
try:
    from dotenv import load_dotenv
except ImportError:
    def load_dotenv():
        pass

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

# Load environment variables
load_dotenv()

try:
    from energia_ai.ai.claude_client import ClaudeClient
    CLAUDE_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è  Warning: Could not import ClaudeClient: {e}")
    CLAUDE_AVAILABLE = False

class LegalAIUsageDemo:
    """Comprehensive demo of your legal AI system"""
    
    def __init__(self):
        self.claude_client = ClaudeClient() if CLAUDE_AVAILABLE else None
    
    async def demo_basic_analysis(self):
        """Demo 1: Basic Legal Document Analysis"""
        print("\n" + "="*60)
        print("üìã DEMO 1: Basic Legal Document Analysis")
        print("="*60)
        
        sample_law = """
        2023. √©vi XVIII. t√∂rv√©ny
        az √©p√ºletek energiahat√©konys√°g√°r√≥l
        
        1. ¬ß E t√∂rv√©ny hat√°lya kiterjed:
        a) lak√≥√©p√ºletekre,
        b) nem lak√°s c√©l√∫ √©p√ºletekre,
        c) k√∂zint√©zm√©nyekre.
        
        2. ¬ß Az energetikai tan√∫s√≠tv√°ny meg√∫j√≠t√°sa:
        a) 10 √©vente k√∂telez≈ë,
        b) jelent≈ës fel√∫j√≠t√°s eset√©n azonnal,
        c) tulajdonv√°lt√°skor sz√ºks√©ges.
        
        3. ¬ß A nem megfelel≈ë tan√∫s√≠tv√°nnyal rendelkez≈ë √©p√ºletek eset√©ben
        100.000 - 500.000 Ft b√≠rs√°g szabhat√≥ ki.
        """
        
        if not self.claude_client:
            print("‚ùå Claude client not available")
            return
        
        print("üìÑ Analyzing Hungarian energy efficiency law...")
        
        # Basic analysis
        result = await self.claude_client.analyze_legal_document(
            sample_law, 
            analysis_type="general"
        )
        
        print(f"‚úÖ Analysis completed")
        print(f"üî§ Tokens used: {result['token_usage']['input_tokens']} input, {result['token_usage']['output_tokens']} output")
        print(f"üìù Analysis preview:")
        print("-" * 40)
        print(result['analysis'][:300] + "...")
        
        return result
    
    async def demo_document_summarization(self):
        """Demo 2: Advanced Document Summarization"""
        print("\n" + "="*60)
        print("üìã DEMO 2: Document Summarization")
        print("="*60)
        
        regulation_text = """
        15/2023. (VI. 15.) BM rendelet
        a lak√≥√©p√ºletek energetikai k√∂vetelm√©nyeir≈ël
        
        A bel√ºgyminiszter a vonatkoz√≥ EU ir√°nyelvek alapj√°n a k√∂vetkez≈ëket rendeli el:
        
        I. Fejezet - √Åltal√°nos rendelkez√©sek
        
        1. ¬ß (1) E rendelet alkalmaz√°s√°ban:
        a) energetikai k√∂vetelm√©ny: az √©p√ºlet energiafelhaszn√°l√°s√°nak maxim√°lis m√©rt√©ke,
        b) energetikai tan√∫s√≠tv√°ny: az √©p√ºlet energiahat√©konys√°gi besorol√°s√°t tartalmaz√≥ okirat,
        c) energetikai auditor: megfelel≈ë k√©pes√≠t√©ssel rendelkez≈ë szakember.
        
        2. ¬ß Az energetikai tan√∫s√≠tv√°ny tartalmazza:
        a) az √©p√ºlet energiahat√©konys√°gi oszt√°ly√°t (A++ - G sk√°la),
        b) az √©ves energiafelhaszn√°l√°s m√©rt√©k√©t,
        c) a jav√≠t√°si javaslatok list√°j√°t,
        d) a tan√∫s√≠tv√°ny √©rv√©nyess√©gi idej√©t.
        
        II. Fejezet - K√∂telezetts√©gek
        
        3. ¬ß (1) A tulajdonos k√∂teles:
        a) energetikai tan√∫s√≠tv√°nyt k√©sz√≠ttetni,
        b) a tan√∫s√≠tv√°nyt naprak√©szen tartani,
        c) v√°s√°rl√≥nak/b√©rl≈ënek bemutatni.
        
        4. ¬ß (1) Az energetikai auditor feladata:
        a) az √©p√ºlet helysz√≠ni vizsg√°lata,
        b) energetikai sz√°m√≠t√°sok elv√©gz√©se,
        c) jav√≠t√°si javaslatok kidolgoz√°sa.
        
        III. Fejezet - Szankci√≥k
        
        5. ¬ß (1) A tan√∫s√≠tv√°ny elmulaszt√°sa eset√©n 50.000-200.000 Ft b√≠rs√°g.
        (2) Hib√°s tan√∫s√≠tv√°ny eset√©n 100.000-300.000 Ft b√≠rs√°g.
        (3) Ism√©telt jogs√©rt√©s eset√©n a b√≠rs√°g k√©tszerese.
        """
        
        if not self.claude_client:
            print("‚ùå Claude client not available")
            return
        
        print("üìÑ Generating comprehensive summary...")
        
        # Generate summary
        summary = await self.claude_client.generate_legal_summary(
            regulation_text, 
            summary_length="detailed"
        )
        
        print(f"‚úÖ Summary generated")
        print(f"üìù Document Summary:")
        print("-" * 40)
        print(summary)
        
        return summary
    
    async def demo_key_points_extraction(self):
        """Demo 3: Key Points Extraction"""
        print("\n" + "="*60)
        print("üìã DEMO 3: Key Points Extraction")
        print("="*60)
        
        contract_text = """
        ENERGIASZOLG√ÅLTAT√ÅSI SZERZ≈êD√âS
        
        Szerz≈ëd≈ë felek:
        Szolg√°ltat√≥: Z√∂ld Energia Kft. (1234 Budapest, Energia √∫t 1.)
        Vev≈ë: P√©lda V√°llalkoz√°s Zrt. (5678 Debrecen, Ipari park 10.)
        
        1. A szerz≈ëd√©s t√°rgya
        A szolg√°ltat√≥ v√°llalja, hogy a vev≈ë r√©sz√©re 100%-ban meg√∫jul√≥ 
        energiaforr√°sokb√≥l sz√°rmaz√≥ villamosenergi√°t sz√°ll√≠t.
        
        2. Mennyis√©g √©s teljes√≠tm√©ny
        - √âves energiamennyis√©g: 500 MWh
        - Maximum teljes√≠tm√©ny: 250 kW
        - Garant√°lt rendelkez√©sre √°ll√°s: 99,5%
        
        3. √År √©s fizet√©si felt√©telek
        - Energia√°r: 45 Ft/kWh + √ÅFA
        - Kapacit√°sd√≠j: 8.500 Ft/kW/h√≥ + √ÅFA
        - Fizet√©si hat√°rid≈ë: 15 nap
        
        4. Szerz≈ëd√©s id≈ëtartama
        - Hat√°lybal√©p√©s: 2024. janu√°r 1.
        - Lej√°rat: 2026. december 31.
        - Automatikus meghosszabb√≠t√°s: 1 √©v
        
        5. Szankci√≥k
        - K√©sedelmi kamat: jegybanki alapkamat + 8%
        - Sz√°ll√≠t√°si hiba eset√©n: -10% √°rcs√∂kkent√©s
        - Vis maior eset√©n felel≈ëss√©g kiz√°r√°sa
        
        6. Felmond√°s
        - Rendes felmond√°s: 3 h√≥napos felmond√°si id≈ë
        - Rendk√≠v√ºli felmond√°s: azonnali hat√°ly√∫ s√∫lyos szerz≈ëd√©sszeg√©s eset√©n
        """
        
        if not self.claude_client:
            print("‚ùå Claude client not available")
            return
        
        print("üìÑ Extracting key points from energy contract...")
        
        # Extract key points
        key_points = await self.claude_client.extract_key_points(contract_text)
        
        print(f"‚úÖ Key points extracted: {len(key_points)} points found")
        print(f"üìù Key Points:")
        print("-" * 40)
        
        for i, point in enumerate(key_points, 1):
            print(f"{i}. {point}")
        
        return key_points
    
    async def demo_legal_qa(self):
        """Demo 4: Legal Question Answering"""
        print("\n" + "="*60)
        print("üìã DEMO 4: Legal Question Answering")
        print("="*60)
        
        questions = [
            "Milyen gyakran kell meg√∫j√≠tani a lak√≥√©p√ºletek energetikai tan√∫s√≠tv√°ny√°t?",
            "Mekkora b√≠rs√°g j√°rhat a tan√∫s√≠tv√°ny elmulaszt√°sa miatt?",
            "Ki jogosult energetikai tan√∫s√≠tv√°ny k√©sz√≠t√©s√©re?",
            "Mikor kell energetikai tan√∫s√≠tv√°nyt bemutatni?",
            "Milyen adatokat tartalmaz az energetikai tan√∫s√≠tv√°ny?"
        ]
        
        if not self.claude_client:
            print("‚ùå Claude client not available")
            return
        
        results = []
        
        for i, question in enumerate(questions, 1):
            print(f"\n‚ùì Question {i}: {question}")
            
            answer_result = await self.claude_client.answer_legal_question(question)
            
            print(f"üìù Answer preview: {answer_result['answer'][:200]}...")
            print(f"üî§ Tokens: {answer_result['token_usage']['input_tokens']} + {answer_result['token_usage']['output_tokens']}")
            
            results.append({
                "question": question,
                "answer": answer_result['answer'],
                "tokens": answer_result['token_usage']
            })
        
        return results
    
    async def demo_contextual_analysis(self):
        """Demo 5: Contextual Legal Analysis"""
        print("\n" + "="*60)
        print("üìã DEMO 5: Contextual Legal Analysis")
        print("="*60)
        
        main_document = """
        Energia-audit jelent√©s
        XY Irodah√°z energetikai vizsg√°lata
        
        √âp√ºlet adatok:
        - Alapter√ºlet: 2.500 m¬≤
        - √âp√≠t√©s √©ve: 1985
        - Utols√≥ fel√∫j√≠t√°s: 2010
        
        Jelenlegi energiafogyaszt√°s:
        - F≈±t√©s: 180 kWh/m¬≤/√©v
        - H≈±t√©s: 45 kWh/m¬≤/√©v
        - Vil√°g√≠t√°s: 25 kWh/m¬≤/√©v
        - √ñsszes: 250 kWh/m¬≤/√©v
        
        Energetikai besorol√°s: D kateg√≥ria
        
        Javasolt int√©zked√©sek:
        1. Homlokzat h≈ëszigetel√©se - 35% megtakar√≠t√°s
        2. Ny√≠l√°sz√°r√≥k cser√©je - 20% megtakar√≠t√°s  
        3. LED vil√°g√≠t√°s - 60% vil√°g√≠t√°si megtakar√≠t√°s
        4. H≈ëszivatty√∫ rendszer - 45% f≈±t√©si megtakar√≠t√°s
        
        Beruh√°z√°si k√∂lts√©g: 85 milli√≥ Ft
        V√°rhat√≥ megt√©r√ºl√©s: 8-10 √©v
        """
        
        context_documents = [
            """
            2023. √©vi XVIII. t√∂rv√©ny 2. ¬ß
            Az energetikai tan√∫s√≠tv√°ny meg√∫j√≠t√°sa jelent≈ës fel√∫j√≠t√°s eset√©n k√∂telez≈ë.
            Jelent≈ës fel√∫j√≠t√°snak min≈ës√ºl, ha a fel√∫j√≠t√°s k√∂lts√©ge meghaladja 
            az √©p√ºlet √©rt√©k√©nek 25%-√°t.
            """,
            """
            Eur√≥pai Uni√≥s ir√°nyelv
            Az √©p√ºletek energiahat√©konys√°g√°r√≥l sz√≥l√≥ 2010/31/EU ir√°nyelv szerint
            a D energetikai kateg√≥ri√°j√∫ √©p√ºletek 2030-ig legal√°bb C kateg√≥ri√°ra 
            jav√≠tand√≥k.
            """
        ]
        
        if not self.claude_client:
            print("‚ùå Claude client not available")
            return
        
        print("üìÑ Performing contextual analysis with supporting documents...")
        
        question = "Milyen jogi k√∂telezetts√©gek vonatkoznak erre az √©p√ºletre a tervezett fel√∫j√≠t√°s kapcs√°n?"
        
        result = await self.claude_client.answer_legal_question(
            question, 
            context_documents=[main_document] + context_documents
        )
        
        print(f"‚úÖ Contextual analysis completed")
        print(f"‚ùì Question: {question}")
        print(f"üìù Analysis:")
        print("-" * 40)
        print(result['answer'])
        print(f"\nüî§ Tokens used: {result['token_usage']['input_tokens']} + {result['token_usage']['output_tokens']}")
        
        return result
    
    async def run_full_demo(self):
        """Run all demos"""
        print("üöÄ ENERGIA AI LEGAL SYSTEM - COMPLETE DEMO")
        print("="*80)
        print("This demo showcases your current legal AI capabilities")
        print("="*80)
        
        if not CLAUDE_AVAILABLE:
            print("‚ùå Claude client not available. Please:")
            print("1. Ensure you have a .env file with ANTHROPIC_API_KEY or CLAUDE_API_KEY")
            print("2. Run: pip install -r requirements.txt")
            print("3. Check your API key is valid")
            return
        
        results = {}
        
        try:
            # Demo 1: Basic Analysis
            results['basic_analysis'] = await self.demo_basic_analysis()
            
            # Demo 2: Summarization
            results['summarization'] = await self.demo_document_summarization()
            
            # Demo 3: Key Points
            results['key_points'] = await self.demo_key_points_extraction()
            
            # Demo 4: Q&A
            results['qa_results'] = await self.demo_legal_qa()
            
            # Demo 5: Contextual Analysis
            results['contextual_analysis'] = await self.demo_contextual_analysis()
            
            # Summary
            print("\n" + "="*60)
            print("üéâ DEMO COMPLETED SUCCESSFULLY!")
            print("="*60)
            print("Your Energia AI system demonstrated:")
            print("‚úÖ Legal document analysis")
            print("‚úÖ Document summarization")
            print("‚úÖ Key points extraction")
            print("‚úÖ Legal question answering")
            print("‚úÖ Contextual analysis with multiple documents")
            print("\nüí° Next steps:")
            print("1. Test with your own legal documents")
            print("2. Integrate with your web interface")
            print("3. Add document upload functionality")
            print("4. Implement user authentication")
            print("5. Add database storage for analysis history")
            
            return results
            
        except Exception as e:
            print(f"‚ùå Demo failed: {e}")
            print("\nüîß Troubleshooting:")
            print("1. Check your internet connection")
            print("2. Verify your Claude API key")
            print("3. Ensure all dependencies are installed")
            return None

# Quick test function
async def quick_test():
    """Quick test of the system"""
    print("üß™ Quick System Test")
    print("-" * 30)
    
    api_key = os.getenv('ANTHROPIC_API_KEY') or os.getenv('CLAUDE_API_KEY')
    if api_key:
        print(f"‚úÖ API Key found: {api_key[:10]}...")
    else:
        print("‚ùå No API key found in environment")
        return False
    
    if CLAUDE_AVAILABLE:
        print("‚úÖ Claude client import successful")
        
        demo = LegalAIUsageDemo()
        try:
            result = await demo.claude_client.analyze_legal_document(
                "Tesztel√©si c√©l√∫ jogi sz√∂veg az energiahat√©konys√°gr√≥l.",
                analysis_type="summary"
            )
            print(f"‚úÖ Quick analysis test passed")
            print(f"   Tokens: {result['token_usage']['input_tokens']} + {result['token_usage']['output_tokens']}")
            return True
        except Exception as e:
            print(f"‚ùå Analysis test failed: {e}")
            return False
    else:
        print("‚ùå Claude client import failed")
        return False

if __name__ == "__main__":
    success = asyncio.run(quick_test())
    if success:
        print("‚úÖ System is working!")
    else:
        print("‚ùå System needs configuration") 